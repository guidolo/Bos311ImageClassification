#!/usr/bin/env python2
# -*- coding: utf-8 -*-
"""
Created on Mon Jul  9 15:27:06 2018

@author: guidosidoni

Este archivo sirve para comparar el accuraci de los modelo corridos en el trabajo final de Machine Learning

Future work: probar con algun tipo de regularizacion para eviatr overfiting, 
tambien se puede probar con una ref mas chica o con data augmentation
"""

import os, shutil
from keras import models #to set up the model
from keras import layers #to set up the model
from keras import optimizers #to compile the medel
from keras.preprocessing.image import ImageDataGenerator
import matplotlib.pyplot as plt


### SPLIT IMAGES into Training, Validation and Testing 

grafitti = '/Users/guidosidoni/Documents/NEU/2do Semestre/DA 5030 Introduction to Data MiningMachine Learning/FinalProject/311pictures/Grafiti'
trash = '/Users/guidosidoni/Documents/NEU/2do Semestre/DA 5030 Introduction to Data MiningMachine Learning/FinalProject/311pictures/Trash'


#Directory where I will save the small dataset
base_dir = '/Users/guidosidoni/Documents/NEU/Misselanea/DeepLearning/MITDeepLearning/trash_and_grafitti_small/'
if os.path.isdir(base_dir) == False: os.mkdir(base_dir)
#rename images

#copy images to the corresponding folders
i = 0
for fname in os.listdir(grafitti):
    print(fname)
    src = os.path.join(grafitti, fname)
    dst = os.path.join(base_dir, 'gra_{}.jpg'.format(i))
    shutil.copyfile(src, dst)
    i = i + 1

i = 0
for fname in os.listdir(trash):
    print(fname)
    src = os.path.join(trash, fname)
    dst = os.path.join(base_dir, 'tra_{}.jpg'.format(i))
    shutil.copyfile(src, dst)
    i = i + 1



#directory for the training, validation and test split
train_dir = os.path.join(base_dir, 'train')
if os.path.isdir(train_dir) == False: os.mkdir(train_dir)
validation_dir = os.path.join(base_dir, 'validation')
if os.path.isdir(validation_dir) == False: os.mkdir(validation_dir)
test_dir = os.path.join(base_dir, 'test')
if os.path.isdir(test_dir) == False: os.mkdir(test_dir)
    

#directory with training trash pictures 
train_trash_dir = os.path.join(train_dir, 'trash')
if os.path.isdir(train_trashs_dir) == False: os.mkdir(train_trashs_dir)

#directory with training grafitti pictures 
train_gra_dir = os.path.join(train_dir, 'grafitti')
if os.path.isdir(train_grafittis_dir) == False: os.mkdir(train_grafittis_dir)

#directory with validation trash pictures 
validation_trash_dir = os.path.join(validation_dir, 'trash')
if os.path.isdir(validation_trashs_dir) == False: os.mkdir(validation_trashs_dir)

#directory with validation grafitti pictures 
validation_gra_dir = os.path.join(validation_dir, 'grafitii')
if os.path.isdir(validation_grafittis_dir) == False: os.mkdir(validation_grafittis_dir)

#directory with test trash pictures 
test_trash_dir = os.path.join(test_dir, 'trash')
if os.path.isdir(test_trashs_dir) == False: os.mkdir(test_trashs_dir)

#directory with test grafitti pictures 
test_gra_dir = os.path.join(test_dir, 'grafitti')
if os.path.isdir(test_grafittis_dir) == False: os.mkdir(test_grafittis_dir)

#COPY IMAGES TO THE CORRESPONDING DIRECTORIES
original_dataset_dir = base_dir


#Copies the first 1000 trash images to train_trash_dir
fnames = ['tra_{}.jpg'.format(i) for i in range(366)]
for fname in fnames:
    src = os.path.join(original_dataset_dir, fname)
    dst = os.path.join(train_trash_dir, fname)
    shutil.copyfile(src, dst)
    
#copy  the next 500 trash images to validation_trash_dir
fnames = ['tra_{}.jpg'.format(i) for i in range(366, 550)]
for fname in fnames:
    src = os.path.join(original_dataset_dir, fname)
    dst = os.path.join(validation_trash_dir, fname)
    shutil.copyfile(src, dst)


#copy  the next 500 trash images to test_trash_dir
#fnames = ['trash.{}.jpg'.format(i) for i in range(1500,2000)]
#for fname in fnames:
#    src = os.path.join(original_dataset_dir, fname)
#    dst = os.path.join(test_trashs_dir, fname)
#    shutil.copyfile(src, dst)
    

#Copies the first 1000 grafitti images to train_grafitti_dir
fnames = ['gra_{}.jpg'.format(i) for i in range(366)]
for fname in fnames:
    src = os.path.join(original_dataset_dir, fname)
    dst = os.path.join(train_gra_dir, fname)
    shutil.copyfile(src, dst)
    
#copy  the next 500 grafitti images to validation_grafitti_dir
fnames = ['gra_{}.jpg'.format(i) for i in range(366, 550)]
for fname in fnames:
    src = os.path.join(original_dataset_dir, fname)
    dst = os.path.join(validation_gra_dir, fname)
    shutil.copyfile(src, dst)

    

#MODELS SET-UP

model = models.Sequential()
model.add(layers.Conv2D( 32, (3,3), activation='relu', input_shape=(150,150,3)))
model.add(layers.MaxPooling2D(2,2))   

model.add(layers.Conv2D( 64, (3,3), activation='relu'))
model.add(layers.MaxPooling2D(2,2))   

model.add(layers.Conv2D( 128, (3,3), activation='relu'))
model.add(layers.MaxPooling2D(2,2))

model.add(layers.Conv2D( 128, (3,3), activation='relu'))
model.add(layers.MaxPooling2D(2,2))

model.add(layers.Flatten())

model.add(layers.Dense(512, activation='relu'))
model.add(layers.Dense(1, activation='sigmoid'))

#MODEL OPTIMIZATION

model.compile(loss='binary_crossentropy', 
              optimizer=optimizers.RMSprop(lr=1e-4),
              metrics=['acc'])


train_datagen = ImageDataGenerator(rescale=1./255)
test_datagen  = ImageDataGenerator(rescale=1./255)

train_generator = train_datagen.flow_from_directory(
        train_dir,
        target_size=(150,150),
        batch_size=20,
        class_mode='binary')

validation_generator = test_datagen.flow_from_directory(
        validation_dir,
        target_size=(150,150),
        batch_size=20,
        class_mode='binary')


#FIT MODEL --> RUN
history = model.fit_generator(
        train_generator,
        steps_per_epoch=18,
        epochs=20,
        validation_data=validation_generator,
        validation_steps=6)


#PLOTING THE OUTPUT
acc = history.history['acc']
val_acc = history.history['val_acc']
loss = history.history['loss']
val_loss = history.history['val_loss']

epochs = range(1, len(acc)+1)

plt.plot(epochs, acc, 'bo', label='Training acc')
plt.plot(epochs, val_acc, 'b', label='Valiudation acc')     
plt.title('Training and validation accuracy')   
plt.legend() 
    
plt.figure()
plt.plot(epochs, loss, 'bo', label='Training loss')
plt.plot(epochs, val_loss, 'b', label='Validation loss')
plt.title('Training and validation loss')
plt.legend()

plt.show()

